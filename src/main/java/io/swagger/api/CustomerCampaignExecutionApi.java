/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.14).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Body;
import io.swagger.model.Body1;
import io.swagger.model.Body10;
import io.swagger.model.Body11;
import io.swagger.model.Body12;
import io.swagger.model.Body13;
import io.swagger.model.Body14;
import io.swagger.model.Body15;
import io.swagger.model.Body16;
import io.swagger.model.Body2;
import io.swagger.model.Body3;
import io.swagger.model.Body4;
import io.swagger.model.Body5;
import io.swagger.model.Body6;
import io.swagger.model.Body7;
import io.swagger.model.Body8;
import io.swagger.model.Body9;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.model.InlineResponse20010;
import io.swagger.model.InlineResponse20011;
import io.swagger.model.InlineResponse20012;
import io.swagger.model.InlineResponse20013;
import io.swagger.model.InlineResponse20014;
import io.swagger.model.InlineResponse20015;
import io.swagger.model.InlineResponse20016;
import io.swagger.model.InlineResponse20017;
import io.swagger.model.InlineResponse2002;
import io.swagger.model.InlineResponse2003;
import io.swagger.model.InlineResponse2004;
import io.swagger.model.InlineResponse2005;
import io.swagger.model.InlineResponse2006;
import io.swagger.model.InlineResponse2007;
import io.swagger.model.InlineResponse2008;
import io.swagger.model.InlineResponse2009;
import io.swagger.model.InlineResponse201;
import io.swagger.model.InlineResponse2011;
import io.swagger.model.InlineResponse2012;
import io.swagger.model.InlineResponse2013;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2020-02-18T00:24:46.166Z[GMT]")
@Api(value = "customer-campaign-execution", description = "the customer-campaign-execution API")
public interface CustomerCampaignExecutionApi {

    @ApiOperation(value = "Activate  a SDCustomerCampaignExecution servicing session", nickname = "activateSDCustomerCampaignExecution", notes = "Activate  a  SDCustomerCampaignExecution servicing session", response = InlineResponse201.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "activate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful Service Activation", response = InlineResponse201.class) })
    @RequestMapping(value = "/customer-campaign-execution/activation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse201> activateSDCustomerCampaignExecution(@ApiParam(value = "SDCustomerCampaignExecution Request Payload" ,required=true )  @Valid @RequestBody Body body);


    @ApiOperation(value = "Update an active SDCustomerCampaignExecution session configuration", nickname = "configureSDCustomerCampaignExecution", notes = "Update an active SDCustomerCampaignExecution session configuration", response = InlineResponse200.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "configure", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Service Configuration", response = InlineResponse200.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/configuration",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse200> configureSDCustomerCampaignExecution(@ApiParam(value = "SDCustomerCampaignExecution Configure Request Payload" ,required=true )  @Valid @RequestBody Body1 body,@ApiParam(value = "SDCustomerCampaignExecution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId);


    @ApiOperation(value = "Request specific processing (e.g. suspend, skip, terminate)", nickname = "controlCustomerCampaignProcedureUpdate", notes = "Control the execution of a customer campaign (e.g. suspend)", response = InlineResponse2004.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "control", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful control of Customer Campaign Procedure Instance", response = InlineResponse2004.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/control",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2004> controlCustomerCampaignProcedureUpdate(@ApiParam(value = "Customer Campaign Procedure Request Payload" ,required=true )  @Valid @RequestBody Body5 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId);


    @ApiOperation(value = "Handle an external exchange (e.g. accept, reject, verify)", nickname = "exchangeCustomerCampaignProcedureCandidateSelectionUpdate", notes = "Accept, reject, etc a candidate list entry", response = InlineResponse20010.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "exchange", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful exchange of CandidateSelection Instance Record", response = InlineResponse20010.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/candidateselection/{bq-reference-id}/exchange",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20010> exchangeCustomerCampaignProcedureCandidateSelectionUpdate(@ApiParam(value = "CandidateSelection request payload" ,required=true )  @Valid @RequestBody Body10 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "CandidateSelection Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId);


    @ApiOperation(value = "Handle an external exchange (e.g. accept, reject, verify)", nickname = "exchangeCustomerCampaignProcedureUpdate", notes = "Accept, reject, etc. a customer campaign procedure", response = InlineResponse2005.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "exchange", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful exchange of Customer Campaign Procedure Instance", response = InlineResponse2005.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/exchange",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2005> exchangeCustomerCampaignProcedureUpdate(@ApiParam(value = "Customer Campaign Procedure Request Payload" ,required=true )  @Valid @RequestBody Body6 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId);


    @ApiOperation(value = "Invoke an automated execute action against the CustomerCampaignProcedure instance", nickname = "executeCustomerCampaignProcedureUpdate", notes = "Execute an automated action against an active customer campaign (e.g. order inventory)", response = InlineResponse2006.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "execute", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful execution of Customer Campaign Procedure Instance", response = InlineResponse2006.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/execution",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2006> executeCustomerCampaignProcedureUpdate(@ApiParam(value = "Customer Campaign Procedure Request Payload" ,required=true )  @Valid @RequestBody Body7 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId);


    @ApiOperation(value = "Capturing feedback against the SDCustomerCampaignExecution service that can target different levels of detail: SD/CR/BQ", nickname = "feedbackSDCustomerCampaignExecution", notes = "Capturing feedback against the SDCustomerCampaignExecution service that can target different levels of detail: SD/CR/BQ", response = InlineResponse2001.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "feedback", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Service Feedback", response = InlineResponse2001.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/feedback",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2001> feedbackSDCustomerCampaignExecution(@ApiParam(value = "SDCustomerCampaignExecution Feedback Request Payload" ,required=true )  @Valid @RequestBody Body2 body,@ApiParam(value = "SDCustomerCampaignExecution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId);


    @ApiOperation(value = "Details of a new CustomerCampaignProcedure instance", nickname = "initiateCustomerCampaignProcedure", notes = "Initiate customer campaign processing", response = InlineResponse2011.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "initiate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful initiation of new CustomerCampaignProcedure instance", response = InlineResponse2011.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/initiation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2011> initiateCustomerCampaignProcedure(@ApiParam(value = "CustomerCampaignProcedure Request Payload" ,required=true )  @Valid @RequestBody Body3 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId);


    @ApiOperation(value = "Details of a new Analysis instance", nickname = "initiateCustomerCampaignProcedureAnalysis", notes = "Initiate campaign execution analysis (results in delivery of the analysis)", response = InlineResponse2013.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "initiate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful initiation of Customer Campaign Procedure instance", response = InlineResponse2013.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/analysis/initiation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2013> initiateCustomerCampaignProcedureAnalysis(@ApiParam(value = "Customer Campaign Procedure Request Payload" ,required=true )  @Valid @RequestBody Body14 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId);


    @ApiOperation(value = "Details of a new Execution instance", nickname = "initiateCustomerCampaignProcedureExecution", notes = "Initiate a campaign execution task (invoke the campaign)", response = InlineResponse2012.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "initiate", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "Successful initiation of Customer Campaign Procedure instance", response = InlineResponse2012.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/execution/initiation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<InlineResponse2012> initiateCustomerCampaignProcedureExecution(@ApiParam(value = "Customer Campaign Procedure Request Payload" ,required=true )  @Valid @RequestBody Body11 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId);


    @ApiOperation(value = "Invoke a service request action against the Analysis instance", nickname = "requestCustomerCampaignProcedureAnalysisUpdate", notes = "Request manual intervention in campaign analysis (e.g. collate work product)", response = InlineResponse20016.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful requisition of Analysis Instance Record", response = InlineResponse20016.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/analysis/{bq-reference-id}/requisition",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20016> requestCustomerCampaignProcedureAnalysisUpdate(@ApiParam(value = "Analysis request payload" ,required=true )  @Valid @RequestBody Body16 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Analysis Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId);


    @ApiOperation(value = "Invoke a service request action against the Execution instance", nickname = "requestCustomerCampaignProcedureExecutionUpdate", notes = "Request manual intervention in a campaign execution task (e.g. request specialist support)", response = InlineResponse20013.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful requisition of Execution Instance Record", response = InlineResponse20013.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/execution/{bq-reference-id}/requisition",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20013> requestCustomerCampaignProcedureExecutionUpdate(@ApiParam(value = "Execution request payload" ,required=true )  @Valid @RequestBody Body13 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Execution Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId);


    @ApiOperation(value = "Invoke a service request action against the CustomerCampaignProcedure instance", nickname = "requestCustomerCampaignProcedureUpdate", notes = "Request manual intervention in a campaign (e.g. add candidate to list)", response = InlineResponse2007.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "request", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful requisition of Customer Campaign Procedure Instance", response = InlineResponse2007.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/requisition",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2007> requestCustomerCampaignProcedureUpdate(@ApiParam(value = "Customer Campaign Procedure Request Payload" ,required=true )  @Valid @RequestBody Body8 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId);


    @ApiOperation(value = "Invoke a reporting action to obtain a Customer Campaign Procedure instance related report", nickname = "retrieveCustomerCampaignExecution", notes = "Retrieve details about an active customer campaign", response = InlineResponse2008.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Retrieved Customer Campaign Procedure Instance", response = InlineResponse2008.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2008> retrieveCustomerCampaignExecution(@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Query params from schema '#/definitions/CRCustomerCampaignProcedureRetrieveInputModel'") @Valid @RequestParam(value = "queryparams", required = false) String queryparams);


    @ApiOperation(value = "Retrieve Behavior Qualifier Reference Ids", nickname = "retrieveCustomerCampaignExecutionBehaviorQualifierReferenceIds", notes = "", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/{behavior-qualifier}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> retrieveCustomerCampaignExecutionBehaviorQualifierReferenceIds(@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Behavior Qualifier Name. ex- Analysis",required=true) @PathVariable("behavior-qualifier") String behaviorQualifier,@ApiParam(value = "Filter to refine the result set. ex- Analysis Instance Status = 'pending'") @Valid @RequestParam(value = "collection-filter", required = false) String collectionFilter);


    @ApiOperation(value = "Retrieve BQ names", nickname = "retrieveCustomerCampaignExecutionBehaviorQualifiers", notes = "", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/customer-campaign-execution/customer-campaign-procedure/behavior-qualifiers/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> retrieveCustomerCampaignExecutionBehaviorQualifiers();


    @ApiOperation(value = "Retrieve CR Ids", nickname = "retrieveCustomerCampaignExecutionReferenceIds", notes = "", response = String.class, responseContainer = "List", authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful", response = String.class, responseContainer = "List") })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<String>> retrieveCustomerCampaignExecutionReferenceIds(@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Filter to refine the result set. ex- CustomerCampaignExecution Instance Status='active'") @Valid @RequestParam(value = "collection-filter", required = false) String collectionFilter);


    @ApiOperation(value = "Invoke a reporting action to obtain a Analysis instance related report.", nickname = "retrieveCustomerCampaignProcedureAnalysis", notes = "Retrieve details about customer campaign analysis activity .The retrieve operation can have sub qualifiers beyond BQ level, please reffer to the model heriarchy to extend beyond BQ level into APIs retrieving sub-qualifier level information.", response = InlineResponse20017.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully  Retrieved Analysis Instance Record", response = InlineResponse20017.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/analysis/{bq-reference-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20017> retrieveCustomerCampaignProcedureAnalysis(@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Analysis Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId,@ApiParam(value = "Query params from schema '#/definitions/BQAnalysisRetrieveInputModel'") @Valid @RequestParam(value = "queryparams", required = false) String queryparams);


    @ApiOperation(value = "Invoke a reporting action to obtain a CandidateSelection instance related report.", nickname = "retrieveCustomerCampaignProcedureCandidateSelection", notes = "Retrieve details about a campaign candidate list .The retrieve operation can have sub qualifiers beyond BQ level, please reffer to the model heriarchy to extend beyond BQ level into APIs retrieving sub-qualifier level information.", response = InlineResponse20011.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully  Retrieved CandidateSelection Instance Record", response = InlineResponse20011.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/candidateselection/{bq-reference-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20011> retrieveCustomerCampaignProcedureCandidateSelection(@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "CandidateSelection Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId,@ApiParam(value = "Query params from schema '#/definitions/BQCandidateSelectionRetrieveInputModel'") @Valid @RequestParam(value = "queryparams", required = false) String queryparams);


    @ApiOperation(value = "Invoke a reporting action to obtain a Execution instance related report.", nickname = "retrieveCustomerCampaignProcedureExecution", notes = "Retrieve details about a campaign execution task .The retrieve operation can have sub qualifiers beyond BQ level, please reffer to the model heriarchy to extend beyond BQ level into APIs retrieving sub-qualifier level information.", response = InlineResponse20014.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully  Retrieved Execution Instance Record", response = InlineResponse20014.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/execution/{bq-reference-id}/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse20014> retrieveCustomerCampaignProcedureExecution(@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Execution Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId,@ApiParam(value = "Query params from schema '#/definitions/BQExecutionRetrieveInputModel'") @Valid @RequestParam(value = "queryparams", required = false) String queryparams);


    @ApiOperation(value = "Analytical views maintained by the SDCustomerCampaignExecution service center for management reporting and analysis purposes", nickname = "retrieveSDCustomerCampaignExecution", notes = "Analytical views maintained by the SDCustomerCampaignExecution service center for management reporting and analysis purposes", response = InlineResponse2002.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "retrieve", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Service Retrieve", response = InlineResponse2002.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2002> retrieveSDCustomerCampaignExecution(@ApiParam(value = "SDCustomerCampaignExecution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Query params from schema '#/definitions/SDCustomerCampaignExecutionRetrieveInputModel'") @Valid @RequestParam(value = "queryparams", required = false) String queryparams);


    @ApiOperation(value = "Update to any amendable fields of the CustomerCampaignProcedure instance", nickname = "updateCustomerCampaignProcedure", notes = "Update details of an active customer campaign", response = InlineResponse2003.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "update", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Updated Customer Campaign Procedure Instance", response = InlineResponse2003.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2003> updateCustomerCampaignProcedure(@ApiParam(value = "Customer Campaign Procedure Request Payload" ,required=true )  @Valid @RequestBody Body4 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId);


    @ApiOperation(value = "Update to any amendable fields of the Analysis instance", nickname = "updateCustomerCampaignProcedureAnalysis", notes = "Update details of campaign execution activity/performance analysis", response = InlineResponse20015.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "update", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Updated Analysis Instance", response = InlineResponse20015.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/analysis/{bq-reference-id}/update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20015> updateCustomerCampaignProcedureAnalysis(@ApiParam(value = "Analysis Request Payload" ,required=true )  @Valid @RequestBody Body15 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Analysis Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId);


    @ApiOperation(value = "Update to any amendable fields of the CandidateSelection instance", nickname = "updateCustomerCampaignProcedureCandidateSelection", notes = "Update a campaign candidate list (or selection criteria)", response = InlineResponse2009.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "update", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Updated CandidateSelection Instance", response = InlineResponse2009.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/candidateselection/{bq-reference-id}/update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse2009> updateCustomerCampaignProcedureCandidateSelection(@ApiParam(value = "CandidateSelection Request Payload" ,required=true )  @Valid @RequestBody Body9 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "CandidateSelection Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId);


    @ApiOperation(value = "Update to any amendable fields of the Execution instance", nickname = "updateCustomerCampaignProcedureExecution", notes = "Update details of a campaign execution task", response = InlineResponse20012.class, authorizations = {
        @Authorization(value = "apiKeyHeader")    }, tags={ "update", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successfully Updated Execution Instance", response = InlineResponse20012.class) })
    @RequestMapping(value = "/customer-campaign-execution/{sd-reference-id}/customer-campaign-procedure/{cr-reference-id}/execution/{bq-reference-id}/update",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<InlineResponse20012> updateCustomerCampaignProcedureExecution(@ApiParam(value = "Execution Request Payload" ,required=true )  @Valid @RequestBody Body12 body,@ApiParam(value = "Customer Campaign Execution Servicing Session Reference",required=true) @PathVariable("sd-reference-id") String sdReferenceId,@ApiParam(value = "Customer Campaign Procedure Instance Reference",required=true) @PathVariable("cr-reference-id") String crReferenceId,@ApiParam(value = "Execution Instance Reference",required=true) @PathVariable("bq-reference-id") String bqReferenceId);

}
